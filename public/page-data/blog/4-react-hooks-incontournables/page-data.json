{"componentChunkName":"component---src-templates-post-index-tsx","path":"/blog/4-react-hooks-incontournables/","result":{"data":{"wpPost":{"title":"4 React Hooks incontournables","content":"\n<p>Les React Hooks sont la clé de voûte du développement React moderne. Alors, si vous vous préparez pour un entretien d&#8217;embauche, mieux vaut maîtriser au moins les bases. Voici cinq Hooks fondamentaux à connaître pour ne pas passer pour un « débutant » (et peut-être même décrocher le job de vos rêves).</p>\n\n\n\n<p><strong>1. useState : Le magicien de l&rsquo;état</strong></p>\n\n\n\n<p><code>useState</code> est le sorcier qui vous permet de gérer l&rsquo;état de vos composants fonctionnels. Fini les composants de classe, bienvenue dans le monde de la magie !</p>\n\n\n\n<pre class=\"wp-block-code has-black-color has-text-color has-link-color wp-elements-4e86f6ccb05ff98c1a4d8d576daa91f2\"><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const &#91;count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez cliqué {count} fois&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Cliquez-moi !\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n\n\n\n<p><strong>2. useEffect : Le magicien des effets secondaires</strong></p>\n\n\n\n<p><code>useEffect</code> est le magicien des effets secondaires. Il vous permet d&rsquo;effectuer des actions « magiques » après le rendu du composant : récupérer des données, manipuler le DOM, etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const &#91;count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `Vous avez cliqué ${count} fois`;\n  }, &#91;count]);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez cliqué {count} fois&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Cliquez-moi !\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n\n\n\n<p><strong>3. useContext : Le magicien du partage</strong></p>\n\n\n\n<p><code>useContext</code> est le magicien du partage. Il vous permet de partager des données entre composants sans passer par une cascade de props (parce que passer des props, c&rsquo;est fatiguant !).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { useContext } from 'react';\n\nconst ThemeContext = React.createContext('light');\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return &lt;button className={theme}&gt;Je suis stylé par le contexte !&lt;/button&gt;;\n}</code></pre>\n\n\n\n<p><strong>4. useRef : Le magicien des références</strong></p>\n\n\n\n<p><code>useRef</code> est le magicien des références. Il vous permet de créer des références persistantes qui ne déclenchent pas de re-rendu à chaque mise à jour.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import React, { useRef } from 'react';\n\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n\n  const onButtonClick = () =&gt; {\n    inputEl.current.focus();\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input ref={inputEl} type=\"text\" /&gt;\n      &lt;button onClick={onButtonClick}&gt;Focus sur l'input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n\n\n\n<p><strong>Conclusion</strong></p>\n\n\n\n<p>En maîtrisant ces quatre Hooks (<code>useState</code>, <code>useEffect</code>, <code>useContext</code>, <code>useRef</code>), vous serez parfaitement armé(e) pour votre entretien d&#8217;embauche. Vous impressionnerez votre futur employeur et aurez toutes les chances de décrocher le job de vos rêves.</p>\n\n\n\n<p>Bon codage et bonne chance pour votre entretien !</p>\n"}},"pageContext":{"id":"cG9zdDo3MzY="}},"staticQueryHashes":[],"slicesMap":{}}