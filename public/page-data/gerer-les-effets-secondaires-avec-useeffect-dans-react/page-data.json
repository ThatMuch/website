{"componentChunkName":"component---src-templates-post-index-tsx","path":"/gerer-les-effets-secondaires-avec-useeffect-dans-react/","result":{"data":{"wpPost":{"id":"cG9zdDo4MjQ=","title":"Gérer les effets secondaires avec useEffect dans React","content":"\n<p>La gestion des effets secondaires est un aspect crucial du développement d&#8217;applications React. Les effets secondaires peuvent inclure des opérations telles que la récupération de données, les abonnements ou la modification manuelle du DOM. React fournit le hook useEffect pour gérer ces effets secondaires dans les composants fonctionnels. Dans cet article, nous allons explorer comment utiliser useEffect efficacement pour gérer les effets secondaires dans vos applications React.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Qu&#8217;est-ce que useEffect ?</h2>\n\n\n\n<p>Le hook useEffect est utilisé pour effectuer des effets secondaires dans les composants fonctionnels. Il accepte deux arguments : une fonction à exécuter après le rendu et un tableau de dépendances facultatif qui détermine quand l&#8217;effet doit être réexécuté. Ce hook vous aide à gérer les opérations telles que la récupération de données, les abonnements et la manipulation manuelle du DOM de manière contrôlée.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Utilisation de base de useEffect</h2>\n\n\n\n<p>L&#8217;utilisation la plus simple de useEffect consiste à fournir une fonction qui s&#8217;exécute après chaque rendu. Voici un exemple :</p>\n\n\n\n<div class=\"wp-block-kevinbatdorf-code-block-pro padding-bottom-disabled\" data-code-block-pro-font-family=\"Code-Pro-Fira-Code\" style=\"font-size:.875rem;font-family:Code-Pro-Fira-Code,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)\"><span style=\"display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#232136\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"54\" height=\"14\" viewBox=\"0 0 54 14\"><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(1 1)\"><circle cx=\"6\" cy=\"6\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\".5\"></circle><circle cx=\"26\" cy=\"6\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\".5\"></circle><circle cx=\"46\" cy=\"6\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\".5\"></circle></g></svg></span><span role=\"button\" tabindex=\"0\" data-code=\"import React, { useState, useEffect } from 'react';\n\nfunction ExempleComposant() {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    // Récupérer les données lorsque le composant est monté\n    fetch('https://api.example.com/data')\n      .then((réponse) =&gt; réponse.json())\n      .then((données) =&gt; setData(data));\n  }, []); // Un tableau de dépendances vide signifie que cet effet ne s'exécute qu'une seule fois après le rendu initial\n\n  return (\n    &lt;div&gt;\n      {data ? &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt; : 'Chargement...'}\n    &lt;/div&gt;\n  );\n}\" style=\"color:#e0def4;display:none\" aria-label=\"Copy\" class=\"code-block-pro-copy-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"width:24px;height:24px\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path class=\"with-check\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 12.75l6 6 9-13.5\"></path><path class=\"without-check\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.5 8.25V6a2.25 2.25 0 00-2.25-2.25H6A2.25 2.25 0 003.75 6v8.25A2.25 2.25 0 006 16.5h2.25m8.25-8.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-7.5A2.25 2.25 0 018.25 18v-1.5m8.25-8.25h-6a2.25 2.25 0 00-2.25 2.25v6\"></path></svg></span><pre class=\"shiki rose-pine-moon\" style=\"background-color: #232136\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #3E8FB0\">import </span><span style=\"color: #E0DEF4; font-style: italic\">React</span><span style=\"color: #908CAA\">,</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #908CAA\">{</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #E0DEF4; font-style: italic\">useState</span><span style=\"color: #908CAA\">,</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #E0DEF4; font-style: italic\">useEffect</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #908CAA\">}</span><span style=\"color: #3E8FB0\"> from </span><span style=\"color: #F6C177\">&#39;react&#39;</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #3E8FB0\">function</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">ExempleComposant</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #3E8FB0\">const</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">[</span><span style=\"color: #E0DEF4; font-style: italic\">data</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">setData</span><span style=\"color: #908CAA\">]</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">useState</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #EA9A97\">null</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #EA9A97\">useEffect</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">    </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> Récupérer les données lorsque le composant est monté</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #EA9A97\">fetch</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #F6C177\">&#39;https://api.example.com/data&#39;</span><span style=\"color: #E0DEF4\">)</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">then</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">(</span><span style=\"color: #C4A7E7; font-style: italic\">réponse</span><span style=\"color: #908CAA\">)</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">réponse</span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">json</span><span style=\"color: #E0DEF4\">())</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">then</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">(</span><span style=\"color: #C4A7E7; font-style: italic\">données</span><span style=\"color: #908CAA\">)</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">setData</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #E0DEF4; font-style: italic\">data</span><span style=\"color: #E0DEF4\">))</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #908CAA\">},</span><span style=\"color: #E0DEF4\"> [])</span><span style=\"color: #908CAA\">;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> Un tableau de dépendances vide signifie que cet effet ne s&#39;exécute qu&#39;une seule fois après le rendu initial</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #3E8FB0\">return</span><span style=\"color: #E0DEF4\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #6E6A86\">&lt;</span><span style=\"color: #9CCFD8\">div</span><span style=\"color: #6E6A86\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #908CAA\">{</span><span style=\"color: #E0DEF4; font-style: italic\">data</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">?</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #6E6A86\">&lt;</span><span style=\"color: #9CCFD8\">pre</span><span style=\"color: #6E6A86\">&gt;</span><span style=\"color: #908CAA\">{</span><span style=\"color: #E0DEF4; font-style: italic\">JSON</span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">stringify</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #E0DEF4; font-style: italic\">data</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">null</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">2</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">}</span><span style=\"color: #6E6A86\">&lt;/</span><span style=\"color: #9CCFD8\">pre</span><span style=\"color: #6E6A86\">&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">:</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #F6C177\">&#39;Chargement...&#39;</span><span style=\"color: #908CAA\">}</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #6E6A86\">&lt;/</span><span style=\"color: #9CCFD8\">div</span><span style=\"color: #6E6A86\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  )</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">}</span></span></code></pre><span style=\"display:flex;align-items:flex-end;padding:10px;width:100%;justify-content:flex-end;background-color:#232136;color:#cecbee;font-size:12px;line-height:1;position:relative\">JavaScript</span></div>\n\n\n\n<p>Dans cet exemple, le hook useEffect récupère des données à partir d&#8217;une API lorsque le composant est monté. Le tableau de dépendances vide (<code>[]</code>) garantit que cet effet ne s&#8217;exécute qu&#8217;une seule fois, de la même manière que componentDidMount dans les composants de classe.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Dépendances et nettoyage</h2>\n\n\n\n<p>Le tableau de dépendances dans useEffect vous permet de contrôler quand l&#8217;effet doit s&#8217;exécuter. Si vous incluez des variables dans le tableau de dépendances, useEffect réexécutera l&#8217;effet chaque fois que l&#8217;une de ces variables change. Voici un exemple :</p>\n\n\n\n<div class=\"wp-block-kevinbatdorf-code-block-pro padding-bottom-disabled\" data-code-block-pro-font-family=\"Code-Pro-Fira-Code\" style=\"font-size:.875rem;font-family:Code-Pro-Fira-Code,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)\"><span style=\"display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#232136\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"54\" height=\"14\" viewBox=\"0 0 54 14\"><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(1 1)\"><circle cx=\"6\" cy=\"6\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\".5\"></circle><circle cx=\"26\" cy=\"6\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\".5\"></circle><circle cx=\"46\" cy=\"6\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\".5\"></circle></g></svg></span><span role=\"button\" tabindex=\"0\" data-code=\"import React, { useState, useEffect } from 'react';\n\nfunction ExempleComposant({ idUser}) {\n  const [dataUser, setDataUser] = useState(null);\n\n  useEffect(() =&gt; {\n    // Récupérer les données de l'utilisateur chaque fois que l'idUser change\n    fetch(`https://api.example.com/users/${idUser}`)\n      .then((réponse) =&gt; réponse.json())\n      .then((data) =&gt; setDataUser(data));\n  }, [idUser]); // L'effet dépend de l'idUser\n\n  return (\n    &lt;div&gt;\n      {dataUser ? (\n        &lt;pre&gt;{JSON.stringify(dataUser, null, 2)}&lt;/pre&gt;\n      ) : (\n        'Chargement...'\n      )}\n    &lt;/div&gt;\n  );\n}\n\" style=\"color:#e0def4;display:none\" aria-label=\"Copy\" class=\"code-block-pro-copy-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"width:24px;height:24px\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path class=\"with-check\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 12.75l6 6 9-13.5\"></path><path class=\"without-check\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.5 8.25V6a2.25 2.25 0 00-2.25-2.25H6A2.25 2.25 0 003.75 6v8.25A2.25 2.25 0 006 16.5h2.25m8.25-8.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-7.5A2.25 2.25 0 018.25 18v-1.5m8.25-8.25h-6a2.25 2.25 0 00-2.25 2.25v6\"></path></svg></span><pre class=\"shiki rose-pine-moon\" style=\"background-color: #232136\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #3E8FB0\">import </span><span style=\"color: #E0DEF4; font-style: italic\">React</span><span style=\"color: #908CAA\">,</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #908CAA\">{</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #E0DEF4; font-style: italic\">useState</span><span style=\"color: #908CAA\">,</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #E0DEF4; font-style: italic\">useEffect</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #908CAA\">}</span><span style=\"color: #3E8FB0\"> from </span><span style=\"color: #F6C177\">&#39;react&#39;</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #3E8FB0\">function</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">ExempleComposant</span><span style=\"color: #908CAA\">({</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #C4A7E7; font-style: italic\">idUser</span><span style=\"color: #908CAA\">})</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #3E8FB0\">const</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">[</span><span style=\"color: #E0DEF4; font-style: italic\">dataUser</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">setDataUser</span><span style=\"color: #908CAA\">]</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">useState</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #EA9A97\">null</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #EA9A97\">useEffect</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">    </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> Récupérer les données de l&#39;utilisateur chaque fois que l&#39;idUser change</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #EA9A97\">fetch</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #F6C177\">`https://api.example.com/users/</span><span style=\"color: #908CAA\">${</span><span style=\"color: #E0DEF4; font-style: italic\">idUser</span><span style=\"color: #908CAA\">}</span><span style=\"color: #F6C177\">`</span><span style=\"color: #E0DEF4\">)</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">then</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">(</span><span style=\"color: #C4A7E7; font-style: italic\">réponse</span><span style=\"color: #908CAA\">)</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">réponse</span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">json</span><span style=\"color: #E0DEF4\">())</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">then</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">(</span><span style=\"color: #C4A7E7; font-style: italic\">data</span><span style=\"color: #908CAA\">)</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">setDataUser</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #E0DEF4; font-style: italic\">data</span><span style=\"color: #E0DEF4\">))</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #908CAA\">},</span><span style=\"color: #E0DEF4\"> [</span><span style=\"color: #E0DEF4; font-style: italic\">idUser</span><span style=\"color: #E0DEF4\">])</span><span style=\"color: #908CAA\">;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> L&#39;effet dépend de l&#39;idUser</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #3E8FB0\">return</span><span style=\"color: #E0DEF4\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #6E6A86\">&lt;</span><span style=\"color: #9CCFD8\">div</span><span style=\"color: #6E6A86\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #908CAA\">{</span><span style=\"color: #E0DEF4; font-style: italic\">dataUser</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">?</span><span style=\"color: #E0DEF4\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">        </span><span style=\"color: #6E6A86\">&lt;</span><span style=\"color: #9CCFD8\">pre</span><span style=\"color: #6E6A86\">&gt;</span><span style=\"color: #908CAA\">{</span><span style=\"color: #E0DEF4; font-style: italic\">JSON</span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">stringify</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #E0DEF4; font-style: italic\">dataUser</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">null</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">2</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">}</span><span style=\"color: #6E6A86\">&lt;/</span><span style=\"color: #9CCFD8\">pre</span><span style=\"color: #6E6A86\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      ) </span><span style=\"color: #3E8FB0\">:</span><span style=\"color: #E0DEF4\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">        </span><span style=\"color: #F6C177\">&#39;Chargement...&#39;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      )</span><span style=\"color: #908CAA\">}</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #6E6A86\">&lt;/</span><span style=\"color: #9CCFD8\">div</span><span style=\"color: #6E6A86\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  )</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">}</span></span>\n<span class=\"line\"></span></code></pre><span style=\"display:flex;align-items:flex-end;padding:10px;width:100%;justify-content:flex-end;background-color:#232136;color:#cecbee;font-size:12px;line-height:1;position:relative\">JavaScript</span></div>\n\n\n\n<p>Dans cet exemple, le hook useEffect récupère les données de l&#8217;utilisateur chaque fois que la prop <code>idUser</code> change. L&#8217;effet dépend de <code>idUser</code>, il sera donc réexécuté chaque fois que <code>idUser</code> change.</p>\n\n\n\n<p>De plus, vous pouvez effectuer un nettoyage en retournant une fonction à partir de la fonction d&#8217;effet. Cette fonction de nettoyage sera appelée avant que le composant ne soit démonté ou avant que l&#8217;effet ne soit réexécuté. Par exemple :</p>\n\n\n\n<div class=\"wp-block-kevinbatdorf-code-block-pro padding-bottom-disabled\" data-code-block-pro-font-family=\"Code-Pro-Fira-Code\" style=\"font-size:.875rem;font-family:Code-Pro-Fira-Code,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)\"><span style=\"display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#232136\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"54\" height=\"14\" viewBox=\"0 0 54 14\"><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(1 1)\"><circle cx=\"6\" cy=\"6\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\".5\"></circle><circle cx=\"26\" cy=\"6\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\".5\"></circle><circle cx=\"46\" cy=\"6\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\".5\"></circle></g></svg></span><span role=\"button\" tabindex=\"0\" data-code=\"import React, { useState, useEffect } from 'react';\n\nfunction ExempleComposant() {\n  const [idIntervalle, setIdIntervalle] = useState(null);\n\n  useEffect(() =&gt; {\n    // Mettre en place un intervalle\n    const id = setInterval(() =&gt; {\n      console.log('Intervalle en cours d\\'exécution...');\n    }, 1000);\n\n    setIdIntervalle(id);\n\n    // Nettoyer l'intervalle lors du démontage du composant\n    return () =&gt; clearInterval(id);\n  }, []); // Un tableau de dépendances vide signifie que cet effet ne s'exécute qu'une seule fois\n\n  return &lt;div&gt;Vérifiez la console pour les logs d'intervalle.&lt;/div&gt;;\n}\" style=\"color:#e0def4;display:none\" aria-label=\"Copy\" class=\"code-block-pro-copy-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"width:24px;height:24px\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path class=\"with-check\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 12.75l6 6 9-13.5\"></path><path class=\"without-check\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.5 8.25V6a2.25 2.25 0 00-2.25-2.25H6A2.25 2.25 0 003.75 6v8.25A2.25 2.25 0 006 16.5h2.25m8.25-8.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-7.5A2.25 2.25 0 018.25 18v-1.5m8.25-8.25h-6a2.25 2.25 0 00-2.25 2.25v6\"></path></svg></span><pre class=\"shiki rose-pine-moon\" style=\"background-color: #232136\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #3E8FB0\">import </span><span style=\"color: #E0DEF4; font-style: italic\">React</span><span style=\"color: #908CAA\">,</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #908CAA\">{</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #E0DEF4; font-style: italic\">useState</span><span style=\"color: #908CAA\">,</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #E0DEF4; font-style: italic\">useEffect</span><span style=\"color: #3E8FB0\"> </span><span style=\"color: #908CAA\">}</span><span style=\"color: #3E8FB0\"> from </span><span style=\"color: #F6C177\">&#39;react&#39;</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #3E8FB0\">function</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">ExempleComposant</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #3E8FB0\">const</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">[</span><span style=\"color: #E0DEF4; font-style: italic\">idIntervalle</span><span style=\"color: #908CAA\">,</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">setIdIntervalle</span><span style=\"color: #908CAA\">]</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">useState</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #EA9A97\">null</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #EA9A97\">useEffect</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">    </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> Mettre en place un intervalle</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #3E8FB0\">const</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">id</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">setInterval</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">{</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">      </span><span style=\"color: #E0DEF4; font-style: italic\">console</span><span style=\"color: #3E8FB0\">.</span><span style=\"color: #EA9A97\">log</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #F6C177\">&#39;Intervalle en cours d</span><span style=\"color: #3E8FB0\">\\&#39;</span><span style=\"color: #F6C177\">exécution...&#39;</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #908CAA\">},</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">1000</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #EA9A97\">setIdIntervalle</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #E0DEF4; font-style: italic\">id</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #908CAA\">    </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> Nettoyer l&#39;intervalle lors du démontage du composant</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #3E8FB0\">return</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=&gt;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">clearInterval</span><span style=\"color: #E0DEF4\">(</span><span style=\"color: #E0DEF4; font-style: italic\">id</span><span style=\"color: #E0DEF4\">)</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #908CAA\">},</span><span style=\"color: #E0DEF4\"> [])</span><span style=\"color: #908CAA\">;</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA; font-style: italic\">//</span><span style=\"color: #6E6A86; font-style: italic\"> Un tableau de dépendances vide signifie que cet effet ne s&#39;exécute qu&#39;une seule fois</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">  </span><span style=\"color: #3E8FB0\">return</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #6E6A86\">&lt;</span><span style=\"color: #9CCFD8\">div</span><span style=\"color: #6E6A86\">&gt;</span><span style=\"color: #E0DEF4\">Vérifiez la console pour les logs d&#39;intervalle.</span><span style=\"color: #6E6A86\">&lt;/</span><span style=\"color: #9CCFD8\">div</span><span style=\"color: #6E6A86\">&gt;</span><span style=\"color: #908CAA\">;</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">}</span></span></code></pre><span style=\"display:flex;align-items:flex-end;padding:10px;width:100%;justify-content:flex-end;background-color:#232136;color:#cecbee;font-size:12px;line-height:1;position:relative\">JavaScript</span></div>\n\n\n\n<p>Dans cet exemple, un intervalle est mis en place lorsque le composant est monté, et il est nettoyé lorsque le composant est démonté en appelant&nbsp;<code>clearInterval</code>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Pièges courants et bonnes pratiques</h2>\n\n\n\n<p>Voici quelques pièges courants et bonnes pratiques lors de l&#8217;utilisation de useEffect :</p>\n\n\n\n<ul class=\"wp-block-list\">\n<li><strong>Dépendances manquantes :</strong> Assurez-vous que toutes les variables utilisées à l&#8217;intérieur de useEffect sont répertoriées dans le tableau de dépendances. Ne pas le faire peut entraîner des valeurs obsolètes ou des bugs.</li>\n\n\n\n<li><strong>Fonctions de nettoyage :</strong> Incluez toujours des fonctions de nettoyage si vous mettez en place des abonnements ou des intervalles pour éviter les fuites de mémoire.</li>\n\n\n\n<li><strong>Effets multiples :</strong> Utilisez plusieurs hooks useEffect si vous avez différents effets secondaires. Cela maintient votre code modulaire et plus facile à maintenir.</li>\n\n\n\n<li><strong>Conditions dans les effets :</strong> Évitez d&#8217;utiliser des conditions directement dans l&#8217;effet. Si une condition est nécessaire, structurez votre code pour qu&#8217;elle soit basée sur les dépendances, ou utilisez des fonctions séparées pour gérer les différents cas.</li>\n\n\n\n<li><strong>Optimisation des performances :</strong> Utilisez useCallback pour les fonctions que vous passez comme dépendances à useEffect afin d&#8217;éviter des réexécutions inutiles.</li>\n</ul>\n\n\n\n<p>En suivant ces pratiques, vous pouvez gérer efficacement les effets secondaires dans vos composants React et maintenir votre application performante et sans bugs.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion</h2>\n\n\n\n<p>Le hook useEffect est un outil puissant pour gérer les effets secondaires dans les composants fonctionnels React. En comprenant comment l&#8217;utiliser correctement, vous pouvez optimiser vos composants, gérer les opérations asynchrones et maintenir une base de code propre et efficace. N&#8217;oubliez pas de gérer correctement les dépendances et d&#8217;inclure des fonctions de nettoyage lorsque cela est nécessaire pour éviter les pièges courants.</p>\n\n\n\n<p></p>\n","featuredImage":{"node":{"mediaItemUrl":"https://back.thatmuch.fr/wp-content/uploads/2021/08/blog-placeholder-dev-04.png"}},"seo":{"metaDesc":"Apprenez à gérer les effets secondaires avec useEffect dans React. Optimisez vos composants et évitez les bugs.","metaKeywords":"","title":"Gérer les effets secondaires avec useEffect dans React - THATMUCH"},"date":"2/04/2025","author":{"node":{"name":"marconte","avatar":{"url":"https://secure.gravatar.com/avatar/e54ee8eed46344bb2764c6cc2c7ea7ec3d6db099b1e015d4d7dce0eb24b38992?s=96&r=g","size":96}}},"categories":{"nodes":[{"name":"Développement","slug":"dev"}]}}},"pageContext":{"id":"cG9zdDo4MjQ="}},"staticQueryHashes":["1501292360","1815691534","592897047"],"slicesMap":{}}